#!/bin/sh

# make the shell more strict
set -o errexit
set -o nounset

# set pipefail if supported
set -o | grep -q "^pipefail" && set -o pipefail

# make zsh behave like every other shell
set -o | grep -q "^posixargzero" && set -o posixargzero

# Behave POSIX-like
POSIXLY_CORRECT=0

expand_path() {
	## Replaces '.' and '..' in paths with their directories and
	## prints the resulting path to STDOUT.

	##$1 the path which should be expanded

	##> $ cd /root/
	##> $ expand_path "./.."
	##> /

	printf '%s' "$(CDPATH='' cd -- "$1" && pwd)"
}

__main() {
	## Main logic of enSHure. Sets up global variables for file inclusion
	## & loads all core functionality.

	##$_BINDIR The path to the binary
	##$_BASEDIR The path where lib/ and modules/ reside

	# Where is the binary?
	_BINDIR="$(expand_path "$(dirname -- "$0")")"
	# If installed under /usr/local/bin set the basedir to /usr/local/share
	if [ "$(printf '%s' "$_BINDIR" | head -c 11)" = "/usr/local/" ]; then
		_BASEDIR="/usr/local/share/enshure/"
	# If installed under /usr/bin/ set the basedir to /usr/share
	elif [ "$(printf  '%s' "$_BINDIR" | head -c 5)" = "/usr/" ]; then
		_BASEDIR="/usr/share/enshure/"
	# Otherwise assume it's downloaded and use the layout of the source
	else
		if [ -z "$_BASEDIR" ]; then
			_BASEDIR=$(expand_path "${_BINDIR}/../")
		fi
	fi

	# Include core functionality
	. "$_BASEDIR/core/base.sh"

	# Start the main execution
	include core/main
	__main_execute "$@"
}
__main "$@"

# TODO: enshure-pack
